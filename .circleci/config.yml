version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  node:
    docker:
      - image: circleci/node:14.2
    working_directory: ~/repo
  python:
    docker:
      - image: circleci/python:3.7

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  deploy-lambda:
    description: "Deploys application"
    parameters:
      stage:
        type: string
        default: staging
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install serverless CLI
          command: sudo npm i -g serverless
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Deploy lambda
          command: |
            sls deploy -s <<parameters.stage>>

  ssh-into-jumpbox:
    description: "SSH into jumpbox to connect to the database"
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      # - run:
      #     name: Install Unzip
      #     command: sudo apt-get update && sudo apt-get install unzip
      # - run:
      #     name: Install AWS CLI
      #     command: |
      #       curl -L -o awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
      #       unzip awscliv2.zip
      #       ./aws/install
      - run:
          name: Install AWS CLI
          # command: sudo apt-get update && sudo apt-get install -y awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install Session Manager plugin
          command: |
            curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
            sudo dpkg -i session-manager-plugin.deb
      - run:
          name: SSH into database
          command: |
            aws ssm get-parameter --name "comino-<<parameters.stage>>-jump-box-pem-key" --output text --query Parameter.Value > ./private-key.pem
            chmod 400 ./private-key.pem   
            JUMP_BOX_NAME=$(aws ssm get-parameter --name /comino-<<parameters.stage>>-jump-box-instance-name --query Parameter.Value)
            POSTGRES_HOST_NAME=$(aws ssm get-parameter --name /comino/<<parameters.stage>>/postgres-hostname --query Parameter.Value)
            POSTGRES_PORT=$(aws ssm get-parameter --name /comino/<<parameters.stage>>/postgres-port --query Parameter.Value)
            ssh -4 -i ./private-key.pem -Nf -M -L ${POSTGRES_PORT//\"}:${POSTGRES_HOST_NAME//\"}:${POSTGRES_PORT//\"} -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o ProxyCommand="aws ssm start-session --target %h --document AWS-StartSSHSession --parameters portNumber=%p --region=eu-west-2" ec2-user@${JUMP_BOX_NAME//\"}

jobs:
  build_and_test:
    executor: node
    environment:
      NODE_ENV: ci
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            sudo npm i --no-cache git
            sudo npm i

      - run:
          name: Run unit tests
          command: npm run test

      - persist_to_workspace:
          root: ~/repo
          paths: .

  assume-role-staging:
    executor: python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING

  ssh-jumpbox-staging:
    executor: node
    steps:
      - ssh-into-jumpbox:
          stage: "staging"

  deploy-staging:
    executor: node
    steps:
      - *attach_workspace

      # - run:
      #     name: Deploy application
      #     command: |
      #       ./node_modules/serverless/bin/serverless deploy -s staging --config serverless.yml
      - deploy-lambda:
          stage: staging

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - build_and_test
      - assume-role-staging:
          context: api-assume-role-comino-document-retrieval-staging-context
          requires:
            - build_and_test
          filters:
            branches:
              only:
                - main
      - ssh-jumpbox-staging:
          requires:
            - assume-role-staging
      - deploy-staging:
          requires:
            - ssh-jumpbox-staging
          filters:
            branches:
              only:
                - main
