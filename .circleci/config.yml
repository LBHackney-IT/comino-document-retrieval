version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.9
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  node:
    docker:
      - image: circleci/node:14.2
    working_directory: ~/repo

# references:
#   workspace_root: &workspace_root '~'
#   attach_workspace: &attach_workspace
#     attach_workspace:
#       at: *workspace_root
      
commands:
  assume-role-and-persist-workspace:
    description: 'Assumes deployment role and persists credentials across jobs'
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .aws

  deploy-lambda:
    description: 'Deploys application'
    parameters:
      stage:
        type: string
        default: staging
    steps:
      - run:
          name: Deploy application
          command: |
            npm prune --production
            sudo npm i -g serverless
            sls deploy -s <<parameters.stage>>

#  command: |
#             npm prune --production
#             sudo npm i -g serverless
#             sls deploy -s <<parameters.stage>>
jobs:
  build_and_test:
    executor: node
    steps:
      - checkout
      # - run:
      #     name: Concatenate all package-lock.json files into single file for checksum
      #     command: cat package-lock.json api/package-lock.json > combined-package-lock.txt

      # - restore_cache:
      #     keys:
      #       - v1-dependencies-{{ checksum "package-lock.json" }}-{{ checksum "combined-package-lock.txt" }}

      - run:
          name: Install dependencies
          command: |
            sudo npm i --no-cache git
            sudo npm i

      # - save_cache:
      #     paths:
      #       - node_modules
      #     key: v1-dependencies-{{ checksum "package-lock.json" }}-{{ checksum "combined-package-lock.txt" }}

      # - run:
      #     name: Run linter
      #     command: npm run lint

      - run:
          name: Run unit tests
          command: npm run test

      - persist_to_workspace:
          root: ~/repo
          paths: .

  assume-role-staging:
    executor: node
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING

  # assume-role-production:
  #   executor: node
  #   steps:
  #     - assume-role-and-persist-workspace:
  #         aws-account: $AWS_ACCOUNT_PRODUCTION

  # integration_test:
  #   machine: true

  #   working_directory: ~/repo

  #   environment:
  #     TZ: Europe/London

  #   steps:
  #     - attach_workspace:
  #         at: ~/repo

  #     - run:
  #         name: Run integration tests
  #         command: |
  #           docker-compose run test_api

  deploy-staging:
    executor: node
    steps:
      - attach_workspace:
          at: ~/repo

    # - run:
    #     name: Set AWS credentials
    #     command: |
    #       pushd ~ && ./repo/node_modules/serverless/bin/serverless config credentials -p aws -k ${AWS_ACCESS_KEY_ID} -s ${AWS_SECRET_ACCESS_KEY} -n hackney && popd

      - run:
          name: Deploy application
          command: |
            ./node_modules/serverless/bin/serverless deploy -s staging --config serverless.yml

      
  # deploy-production:
  #   executor: node

  #   steps:
  #     - *attach_workspace
  #     - checkout

  #     - deploy-lambda:
  #         stage: production

     
  # deploy-production:
  #   executor: my-executor

  #   steps:
  #     - attach_workspace:
  #         at: ~/repo

  #     - run:
  #         name: Set AWS credentials
  #         command: |
  #           pushd ~ && ./repo/node_modules/serverless/bin/serverless config credentials -p aws -k ${AWS_ACCESS_KEY_ID} -s ${AWS_SECRET_ACCESS_KEY} -n hackney && popd

  #     - run:
  #         name: Deploy application
  #         command: |
  #           ./node_modules/serverless/bin/serverless deploy -s production --config serverless-jigsaw-docs.yml
  #           ./node_modules/serverless/bin/serverless deploy -s production --config serverless-api.yml

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - build_and_test
        # build: |
        #     sudo npm i --no-cache git
        #     sudo npm i
      # - start:
      #   requires:
      #     -build_and_test
      #   start: npm run start

      # - test:
      #   requires: 
      #     -build_and_test
      
      - assume-role-staging:
        context: api-assume-role-comino-document-retrieval-staging-context
        requires:
          - build_and_test
          # - start
          # - test
        filters:
          branches:
            only:
              - main

      - deploy-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only:
                - main
     
      # - permit-deploy-production:
      #     type: approval
      #     requires:
      #       - deploy-staging
      # - deploy-production:
      #     requires:
      #       - permit-deploy-production
