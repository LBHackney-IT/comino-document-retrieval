service: comino-document-retrieval
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage}
  region: eu-west-2
  timeout: 30
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true
  environment:
    BUCKET_NAME: comino-document-retrieval-${self:provider.stage}-documents
  s3:
  documentsBucket:
    accessControl: Private
    name: ${self:provider.environment.BUCKET_NAME}
    bucketEncryption:
      ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
    publicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
custom:
  serverless-offline-ssm:
    stages:
      - offline

plugins:
  - serverless-offline-ssm
  - serverless-offline

package:
  individually: true
  exclude:
    - ./**

functions:
  comino-document-retrieval:
    name: comino-document-retrieval-${self:provider.stage}
    role: lambdaExecutionRole
    handler: api/index.handler
    package:
      include:
        - api/index.js
        - api/lib/**
        - node_modules/**
    events:
      - http:
          path: "{proxy+}"
          method: ANY
    vpc:
      securityGroupIds: ${self:custom.securityGroups.${self:provider.stage}}
      subnetIds: ${self:custom.subnets.${self:provider.stage}}

resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: documentsBucketAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:PutObject
                  - s3:PutObjectTagging
                  - s3:DeleteObject
                Effect: "Allow"
                Resource:
                  - "arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*"

custom:
  # domain-name:
  #   Fn::Join:
  #     - '.'
  #     - - Ref: ApiGatewayRestApi
  #       - execute-api
  #       - eu-west-2
  #       - amazonaws.com
  # alias: ${ssm:/comino-document-retrieval/${self:provider.stage}/client-url}
  # certificate-arn:
  #   staging: arn:aws:acm:us-east-1:549011513230:certificate/d49e84b5-5ed2-4d35-87f3-7d10f848ee6b
  #   production: arn:aws:acm:us-east-1:658402009206:certificate/06d017f3-c883-49aa-8af8-e4398fa03286
  securityGroups:
    staging:
      - sg-091049a0c605ae673
    # production:
    #   - sg-0cd04f47325eca077
  subnets:
    staging:
      - subnet-0acfea27bdd1e237e
    # production:
    #   - subnet-0a00b445652b2d8e8
    #   - subnet-0c31b6c3961a84548